<?php
class Type {
 const TYPE_FLOAT = 0;
 const TYPE_INT = 1;
}
class Parameter {
 private $id;
 private $name;
 private $value;
 private $type;
 public function __construct($id, $name, $value, $type) {
$this->id = $id;
$this->name = $name;
$this->value = $value;
$this->type = $type;
 }
 public function getId() {
return $this->id;
 }
 public function getName() {
return $this->name;
 }
 public function getValue() {
return $this->value;
 }
 public function setValue($value) {
$this->value = $value;
 }
 public function getType() {
return $this->type;
 }
 public function toJson() {
return json_encode([
'id' => $this->id,
'name' => $this->name,
'value' => $this->value,
'type' => $this->type,
]);
 }
 public static function fromJson($json) {
$data = json_decode($json, true);
return new self(
$data['id'],
$data['name'],
$data['value'],
$data['type']
);
 }
}
$param = new Parameter('0009', 'why', 6.5, Type::TYPE_FLOAT);
$json = $param->toJson();
if (file_put_contents('id.txt', $json) === false) {
 die('Error writing to file');
}
$json = file_get_contents('id.txt');
if ($json === false) {
 die('Error reading file');
}
$param = Parameter::fromJson($json);
echo "Data before modifications:\n"; echo '<br>'; echo "ID: {$param->getId()}\n"; echo 
'<br>';
echo "Name: {$param->getName()}\n"; echo '<br>'; echo "Value: {$param->getValue()}\n"; 
echo '<br>';
echo "Type: {$param->getType()}\n\n";
echo '<br>'; echo '<br>';
$param->setValue(9.9);
$json = $param->toJson();
if (file_put_contents('id.txt', $json) === false) {
 die('Error writing to file');
}
$json = file_get_contents('id.txt');
if ($json === false) {
 die('Error reading file');
}
$param = Parameter::fromJson($json);
echo "Data after modifications:\n"; echo '<br>'; echo "ID: {$param->getId()}\n"; echo 
'<br>';
echo "Name: {$param->getName()}\n"; echo '<br>'; echo "Value: {$param->getValue()}\n"; 
echo '<br>';
echo "Type: {$param->getType()}\n";
